
Personalized Learning Chatbot
A web-based chatbot application that provides personalized learning resources by integrating Google's Gemini AI and YouTube API. The app generates responses based on user input and offers video and course recommendations from YouTube and educational platforms like Udemy, Coursera, and edX.
Features
•	Interactive Chatbot: Ask questions or provide prompts, and the chatbot (powered by Gemini AI) will generate relevant answers.
•	Video Recommendations: Fetches video recommendations from YouTube based on the user's query.
•	Course Recommendations: Suggests learning courses from popular platforms like Udemy, Coursera, and edX.
•	Customizable: Supports API key integration for Gemini and YouTube, allowing easy updates and changes.
Tech Stack
•	Streamlit: A fast, easy-to-use framework for creating data apps.
•	Google Gemini AI: Used for generating responses based on user input.
•	YouTube API: Fetches video recommendations.
•	Python: The programming language used for the app's backend.
Prerequisites
To run this app locally, you'll need the following:
•	Python 3.x installed on your machine.
•	Streamlit: The web framework for this app.
•	Google Generative AI (Gemini API) and YouTube API keys to fetch data.
Install required libraries:
You can install the necessary dependencies by using the following command:
pip install -r requirements.txt
Ensure the requirements.txt includes:
streamlit
google-generativeai
requests
API Keys:
•	Gemini API Key: You'll need a Gemini API key for interacting with Google’s generative model. You can add it to your Streamlit secrets or as an environment variable.
•	YouTube API Key: Similarly, get a YouTube API key from Google Cloud Platform, and add it to your secrets or as an environment variable.
Setup Instructions
1. Clone the repository:
Clone this repository to your local machine using the following command:
git clone https://github.com/yourusername/personalized-learning-chatbot.git
2. Set up API Keys:
•	Create a .streamlit/secrets.toml file in your project directory and add the API keys like so:
[GEMINI_API_KEY]
GEMINI_API_KEY = "your_gemini_api_key_here"

[YOUTUBE_API_KEY]
YOUTUBE_API_KEY = "your_youtube_api_key_here"
Alternatively, you can set them as environment variables:
•	GEMINI_API_KEY
•	YOUTUBE_API_KEY
3. Run the Streamlit app:
After setting up the project, navigate to the directory where the project is located and run the following command:
streamlit run app.py
This will launch the app in your browser. You can interact with the chatbot and start querying for information.
How to Use the App
1.	Ask Questions: Type in any query or prompt into the text input box at the top of the page. The chatbot will generate a response using the Gemini AI model.
2.	View Video Recommendations: The app will display relevant YouTube videos based on the query, allowing you to watch content related to your learning interest.
3.	Explore Courses: The app will provide links to popular courses related to your query on Udemy, Coursera, and edX.
Structure of the Code
app.py
The main script for running the app, containing:
•	Initialization: Set up the API keys and connect to Google Gemini and YouTube API.
•	Chat Functionality: User inputs are processed and sent to the Gemini model to generate responses.
•	Video & Course Recommendations: After generating a response, the app fetches and displays relevant YouTube videos and courses.
requirements.txt
Contains the necessary dependencies for running the app:
•	streamlit: Web framework.
•	google-generativeai: To access the Gemini AI model.
•	requests: For API calls to YouTube.
secrets.toml (Optional)
You can configure your API keys here:
[GEMINI_API_KEY]
GEMINI_API_KEY = "your_gemini_api_key_here"

[YOUTUBE_API_KEY]
YOUTUBE_API_KEY = "your_youtube_api_key_here"
Contributing
Contributions to this project are welcome! To contribute, follow these steps:
1.	Fork this repository.
2.	Create a new branch for your feature or bug fix.
3.	Commit your changes.
4.	Push your changes to your fork.
5.	Open a pull request to the main repository.
Please ensure that your code adheres to the project’s coding standards and passes all existing tests.
License
This project is licensed under the MIT License - see the LICENSE file for details.
Contact
For any questions or feedback, feel free to contact Aditi N Ubale.

